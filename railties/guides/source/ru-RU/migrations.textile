h2. Миграции

Миграции - удобный способ для внесения изменений в Вашу базу данных структурным и организованным способом. Вы можете редактировать фрагменты SQL вручную, но Вы тогда будете ответственны за сообщение другим разработчикам, что они должны выполнить тоже самое. Вы также должны помнить все изменения, которые необходимо выполнить на production, каждый раз, когда разворачиваете приложение.

Active Record tracks which migrations have already been run so all you have to do is update your source and run +rake db:migrate+. Active Record will work out which migrations should be run. It will also update your +db/schema.rb+ file to match the structure of your database.


Migrations also allow you to describe these transformations using Ruby. The great thing about this is that (like most of Active Record's functionality) it is database independent: you don't need to worry about the precise syntax of +CREATE TABLE+ any more than you worry about variations on +SELECT *+ (you can drop down to raw SQL for database specific features). For example you could use SQLite3 in development, but MySQL in production.

Вы узнаете все о Миграциях включая:

* Генераторы для создания миграций
* Методы Active Record provides для управления Вашей базой данных
* Задания Rake, которые управляют ими
* Как они связаны с +schema.rb+

endprologue.

h3. Анатомия Миграций

Перед тем, как углубиться в детали миграций, приведем несколько примеров использования

<ruby>
class CreateProducts < ActiveRecord::Migration
  def self.up
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end

  def self.down
    drop_table :products
  end
end
</ruby>

Данная миграция добавляет таблицу +products+ со строковым полем +name+ и текстовым полем +description+. Поля с первичным ключем называются +id+, и добавляются автоматически, так что нам не надо их определять вручную. Поля +created_at+ и +updated_at+ типа timestamp Active Record также добавляет автоматически. Отменить данную миграцию тоже самое, что удалить таблицу.

Миграции не ограничивают изменение схемы. Вы также можете использовать их для того, что бы поправить плохие данные в БД или добавить новые поля:

<ruby>
class AddReceiveNewsletterToUsers < ActiveRecord::Migration
  def self.up
    change_table :users do |t|
      t.boolean :receive_newsletter, :default => false
    end
    User.update_all ["receive_newsletter = ?", true]
  end

  def self.down
    remove_column :users, :receive_newsletter
  end
end
</ruby>

Данная миграция добавляет поле +receive_newsletter+ в таблицу  +users+. Мы хотим сделать его равным +false+ по умолчанию для новых пользователей, но для существующих равным +true+.
NOTE: Есть некоторые "caveats":#using-models-in-your-migrations использования моделей в миграциях.

h4. Миграции - класс

Миграция подкласс класса <tt>ActiveRecord::Migration</tt>, который осуществляет два метода: +up+ (выполнение необходимых преобразований) и +down+ (отмена преобразований).

Active Record обеспечивает методы, которые выполняют общие задачи определения данных в базе данных независимым путем (Вы можете прочитать о них подробно позже):

* +create_table+
* +change_table+
* +drop_table+
* +add_column+
* +change_column+
* +rename_column+
* +remove_column+
* +add_index+
* +remove_index+

Если вам необходимо определить спесифические даные для БД (например, создать "внешний ключ":#active-record-and-referential-integrity), тогда необходимо тспользовать функцию +execute+, которая позволяет Вам выполнять произвольный SQL. Например после добавления столбца Вы можете написать код, чтобы установить значение этого поля для существующих записей (в случае необходимости использовать Ваши модели).

В СУБД, которые поддерживают транзакции (такие как PostgreSQL или SQLite3), миграции обернуты в транзакции. Если СУБД не поддерживает транзакции (например, MySQL) и миграция выполнилась не полностью, тогда БД не вернется в исходное состояние. Вы должны будете откатить изменения вручную.

h4. What's in a Name Именование транзакций

Миграции сохраняютя в файлах в папке +db/migrate+, для каждого класса миграции. Название файла имеет форму +YYYYMMDDHHMMSS_create_products.rb +, дата/время в формате UTC, далее через подчеркивание название миграции. Имя класса миграции должно соответствовать (camelcased версии) последней части имени файла. Например +20080906120000_create_products.rb + определяет +CreateProducts +, и +20080906120001_add_details_to_products.rb + определяет +AddDetailsToProducts +. Если Вы действительно хотите поменять имя файла тогда, Вы <их>должны</их>, обновить название класса внутри, в противном случае Rails будет выдавать ошибку на недостающий класс.

Внутренне Rails использует только порядок миграции (timestamp), чтобы идентифицировать их. До Rails 2.1 порядок миграций начиналось с 1 и увеличивалось каждый раз, когда была произведена миграция. Если разработчиков много для них было легко столкнуться, требуя Вас к перемещениям обратной перемотки и перенумеровать их. Начиная с Rails 2.1 этого в значительной степени избегают путем использовании времени создания миграции, для их идентификации. Вы можете вернуться к старой схеме нумерации, устанавливая +config.active_record.timestamped_migrations + в значение +false + в файле +config/environment.rb +.

The combination of timestamps and recording which migrations have been run allows Rails to handle common situations that occur with multiple developers.
Комбинация timestamps и регистрации, какими перемещениями управляли, позволяет Рельсам обращаться с общими ситуациями, которые происходят с многократными разработчиками.

For example Alice adds migrations +20080906120000+ and +20080906123000+ and Bob adds +20080906124500+ and runs it. Alice finishes her changes and checks in her migrations and Bob pulls down the latest changes. Rails knows that it has not run Alice's two migrations so +rake db:migrate+ would run them (even though Bob's migration with a later timestamp has been run), and similarly migrating down would not run their +down+ methods.
Например Элис добавила миграцию +20080906120000 + и +20080906123000 +, и Боб добавил +20080906124500 + и запускает ее. Элис заканчивает свои изменения и фиксирует их в миграциях, и Боб сбрасывает последние изменения. Rails knows that it has not run Alice’s two migrations so rake db:migrate would run them (even though Bob’s migration with a later timestamp has been run), and similarly migrating down would not run their down methods. 

Of course this is no substitution for communication within the team. For example, if Alice's migration removed a table that Bob's migration assumed to exist, then trouble would certainly strike.
Конечно это не замена для общения в пределах команды. Например, если бы миграция Элис удаляла таблицу, которую Бобина миграция предполагала как, существовующую ??? then trouble would certainly strike.

h4. Изменение миграций

Иногда возможны ошибки при написании миграции. Если Вы уже выполнили миграцию тогда, Вы не можете просто отредактировать миграцию и выполнить ее снова: Rails думают, что это уже выполненная миграцию и ничего не сделает, когда Вы выполняете +rake db:migrate +. Вы должны откатить миграцию (например с +rake db:rollback +), отредактировать Вашу миграцию и затем выполнить +rake db:migrate +, чтобы выполнить исправленную версию.

В общем редактирирование существующих миграций не хорошая идея: Вы будете создавать дополнительную работу для вас и Ваших сотрудников и вызывать головные боли, если существующая версия миграции была уже выполнена на промышленных машинах. Вместо этого Вы должны написать новую миграцию, которая выполняет изменения, которые Вам необходимы. Редактирование недавно сгенерированной миграции, которая еще не была закоммичена (или более широко - не была размножена вне Вашей машины разработки) относительно безопасно. Только используйте некоторый здравый смысл.

h3. Создание миграции

h4. Создание модели

Модель и генераторы эшафота создадут миграции, соответствующие для того, чтобы добавить новую модель. Эта миграция уже будет содержать инструкции для того, чтобы создать соответствующую таблицу. Если Вы говорите Rails, какие столбцы Вы хотите создать, путем добавления соотвествующих инструкций, то они будут также созданы. Например, если выполнить

<shell>
ruby script/generate model Product name:string description:text
</shell>

будет создана миграция, которая выглядит следующим образом

<ruby>
class CreateProducts < ActiveRecord::Migration
  def self.up
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end

  def self.down
    drop_table :products
  end
end
</ruby>

Вы можете добавить столько столбцов пар name/type, сколько Вы хотите. По умолчанию +t.timestamps + (который создает столбцы +updated_at + и +created_at + автоматически заполнены Active Record), также будут добавлен.

h4. Создание Автономной Миграции

Если Вы создаете миграции для других целей (например, чтобы добавить столбец к существующей таблице) тогда, Вы можете использовать генератор миграции:

<shell>
ruby script/generate migration AddPartNumberToProducts
</shell>

Это создаст пустую миграцию с соответствующим названием :

<ruby>
class AddPartNumberToProducts < ActiveRecord::Migration
  def self.up
  end

  def self.down
  end
end
</ruby>

If the migration name is of the form "AddXXXToYYY" or "RemoveXXXFromYYY" and is followed by a list of column names and types then a migration containing the appropriate +add_column+ and +remove_column+ statements will be created.
Если название миграции будет иметь форму "AddXXXToYYY" или "RemoveXXXFromYYY" и будет сопровождаться списком названий столбца, тогда миграция будет содержать соответственно +add_column + и +remove_column +, операторы.

<shell>
ruby script/generate migration AddPartNumberToProducts part_number:string
</shell>

сгенерирует

<ruby>
class AddPartNumberToProducts < ActiveRecord::Migration
  def self.up
    add_column :products, :part_number, :string
  end

  def self.down
    remove_column :products, :part_number
  end
end
</ruby>

Точно так же,

<shell>
ruby script/generate migration RemovePartNumberFromProducts part_number:string
</shell>

сгенерирует

<ruby>
class RemovePartNumberFromProducts < ActiveRecord::Migration
  def self.up
    remove_column :products, :part_number
  end

  def self.down
    add_column :products, :part_number, :string
  end
end
</ruby>

Вы не ограничены одним волшебно сгенерированным столбцом, например

<shell>
ruby script/generate migration AddDetailsToProducts part_number:string price:decimal
</shell>

сгенерирует

<ruby>
class AddDetailsToProducts < ActiveRecord::Migration
  def self.up
    add_column :products, :part_number, :string
    add_column :products, :price, :decimal
  end

  def self.down
    remove_column :products, :price
    remove_column :products, :part_number
  end
end
</ruby>

Как всегда, то, что было сгенерировано для Вас, является только отправной точкой. Вы можете добавить или удалить из миграции, как Вы считаете необходимвм.

h3. Написание Миграций

Как только Вы создали свою миграцию, используя один из генераторов, пришло время чтобы работать!

h4. Создание таблицы

Метод миграции +create_table + будет одной из Ваших рабочих лошадок. Типичное использование:

<ruby>
create_table :products do |t|
  t.string :name
end
</ruby>

которое создает таблицу +products+ со столбцом +name + (и как обсуждено ниже, неявный столбец +id+).

The object yielded to the block allows you create columns on the table. There are two ways of doing this: The first (traditional) form looks like
Объект, к которому приводят блоку, позволяет, что Вы создаете столбцы на таблице. Есть два способа сделать это: первая (традиционная) форма

<ruby>
create_table :products do |t|
  t.column :name, :string, :null => false
end
</ruby>

вторая форма, так называемая "сексуальная" миграция, опускает несколько избыточный +column+ метод. Вместо этого +string+, +integer+, и т.д. методы создают столбец того типа. Последующие параметры - такие же.

<ruby>
create_table :products do |t|
  t.string :name, :null => false
end
</ruby>

По умолчанию +create_table+ создаст первичный ключ, названный +id+. Вы можете поменять имя первичного ключа - +:primary_key+ опцией (не забывайте обновлять соответствующую модель), или если Вы не хотите иметь первичный ключ вообще (например для таблицы объединения HABTM), Вы можете написать +:id => false+. Если Вам необходимо передать в базу данных специфические опции, Вы можете поместить фрагмент SQL в +:options + опция. Например

<ruby>
create_table :products, :options => "ENGINE=BLACKHOLE" do |t|
  t.string :name, :null => false
end
</ruby>

применит +ENGINE=BLACKHOLE+ к оператору SQL, используемому, чтобы составить таблицу (для MySQL, значение по умолчанию - +ENGINE=InnoDB+).

Типы, которые поддерживает Active Record: +:primary_key+, +:string+, +:text+, +:integer+, +:float+, +:decimal+, +:datetime+, +:timestamp+, +:time+, +:date+, +:binary +, +:boolean +.

Они будут отображены на соответствующий основной тип базы данных, например с MySQL +:string+ отображен к +VARCHAR (255)+. Вы можете создать столбцы типов, не поддерживающие Active Record, используя несексуальный синтаксис, например

<ruby>
create_table :products do |t|
  t.column :name, 'polygon', :null => false
end
</ruby>

Это может однако препятствовать переносимости в другие базы данных.

h4. Изменение таблиц

A close cousin of +create_table+ is +change_table+, used for changing existing tables. It is used in a similar fashion to +create_table+ but the object yielded to the block knows more tricks. For example
Близкий кузен +create_table+ является +change_table+, применяемый для того, чтобы изменить существующие таблицы. Он используется подобным образом, как и  +create_table+, но объект, к которому приводят блоку, знает больше уловок. Например

<ruby>
change_table :products do |t|
  t.remove :description, :name
  t.string :part_number
  t.index :part_number
  t.rename :upccode, :upc_code
end
</ruby>
удаляет столбцы +description+ и +name+, создает столбец +part_number + и добавляет индекс для него. Наконец, он переименовывает столбец +upccode+. Это то же самое, что и 

<ruby>
remove_column :products, :description
remove_column :products, :name
add_column :products, :part_number, :string
add_index :products, :part_number
rename_column :products, :upccode, :upc_code
</ruby>

Вы не должны повторять название таблицы, и оно группирует все операторы, связанные с изменением одной конкретной таблицы. Индивидуальные названия преобразований также более коротки, например +remove_column+ становится +remove+, и +add_index+ становится +index+.

h4. Special Helpers Специальные помощники

Active Record provides some shortcuts for common functionality. It is for example very common to add both the +created_at+ and +updated_at+ columns and so there is a method that does exactly that:
Active Record поддерживает некоторые ярлыки для общих функциональных возможностей. Например очень распространено добавлять столбцы +created_at+ и +updated_at+, таким образом есть метод, который делает это:

<ruby>
create_table :products do |t|
  t.timestamps
end
</ruby>
создаст новую таблицу products с теми двумя столбцами (плюс столбец +id+) тогда как

<ruby>
change_table :products do |t|
  t.timestamps
end
</ruby>
добавляют эти столбцы к существующей таблице.

Другой помощник называется +references + (также доступный как +belongs_to+). В его самой простой форме добавляет некоторую удобочитаемость

<ruby>
create_table :products do |t|
  t.references :category
end
</ruby>

создаст столбец +category_id+ соответствующего типа. Помните, что Вы передаете название модели, а не название столбца. Active Record добавляет +_id + для Вас. Если у Вас будет составной +belongs_to+, тогда ассоциация +references+ добавит оба из требуемых столбцов:

<ruby>
create_table :products do |t|
  t.references :attachment, :polymorphic => {:default => 'Photo'}
end
</ruby>
добавит столбец +attachment_id+ и строковый столбец +attachment_type+ со значением по умолчанию 'Photo'.
\
NOTE: помощник +references + фактически не создает ограничения внешнего ключа для Вас. Вы должны будете использовать +execute+ для этого или плагин, который добавляет "поддержку внешнего ключа":#active-record-and-referential-integrity.

Если помощники, поддерживаемых Active Record, не достаточно, Вы можете использовать +execute+ функцию, чтобы выполнить произвольный SQL.

Для более детального изучения и примеров отдельных методов, используйте API документацию "<tt>ActiveRecord::ConnectionAdapters::SchemaStatements</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html  (который обеспечивает методы, доступные для up и down методов),  "<tt>ActiveRecord::ConnectionAdapters::TableDefinition</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html (which provides the methods available on the object yielded by +create_table+) and(который описывает методы, доступные на объекте, к которому приводит create_table), и "<tt>ActiveRecord::ConnectionAdapters::Table</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Table.html (which provides the methods available on the object yielded by +change_table+).

h4. Написание +down+ методов

The +down+ method of your migration should revert the transformations done by the +up+ method. In other words the database schema should be unchanged if you do an +up+ followed by a +down+. For example if you create a table in the +up+ method you should drop it in the +down+ method. It is wise to do things in precisely the reverse order to in the +up+ method. +down+ метод Вашей миграции должен вернуть преобразования, сделанные +up+ методом. Другими словами схема базы данных должна остаться неизменной, если Вы выполняете последовательно +up+ и +down+ методы. Например, если Вы создаете таблицу в +up+ методе, Вы должны удалить ее в +down+ методе. Мудро откатывать изменения точно в обратный порядоке к +up+ методу. Например

<ruby>
class ExampleMigration < ActiveRecord::Migration

  def self.up
    create_table :products do |t|
      t.references :category
    end
    #добавляем foreign key
    execute <<-SQL
      ALTER TABLE products
        ADD CONSTRAINT fk_products_categories
        FOREIGN KEY (category_id)
        REFERENCES categories(id)
    SQL

    add_column :users, :home_page_url, :string

    rename_column :users, :email, :email_address
  end

  def self.down
    rename_column :users, :email_address, :email
    remove_column :users, :home_page_url
    execute "ALTER TABLE products DROP FOREIGN KEY fk_products_categories"
    drop_table :products
  end
end
</ruby>
Иногда Ваша миграция сделает такое, что является необратимым, например она могла удалить некоторые данные. В случаях как те, когда Вы не можете полностью откатить миграцию, Вы можете поднять +IrreversibleMigration+ в +down+ методе. Если кто-то попытается откатить Вашу миграцию, то получит сообщение об ошибке, в котором будет сказано, что операция не выполнится.


h3. Запуск миграции

Rails обеспечивают ряд задач rake для работы с миграциями, который сводится к выполнению определенных наборов миграций. Самая первая миграция связанная с rake, которую Вы используете, вероятно будет +db:migrate+. В его наиболее простой форме выполняет только +up+ методы для всех миграций, которые еще не были выполнены. Если нет таких миграций - выходит.

Отметьте, что выполнение +db:migrate+ также вызывает +db:schema:dump+ задачу, которая обновит Ваш db/schema.rb файл, чтобы соответствовать структуре Вашей базы данных.

Если Вы определите целевую версию, то Active Record выполнит необходимые миграции (вверх или вниз), пока он не достигнет указанной версии. Версия - числовой префикс в имени файла миграции. Например переместиться к выполненной версии 20080906120000

<shell>
rake db:migrate VERSION=20080906120000
</shell>

Если это будет больше чем последняя версия (то есть она перемещается вверх), то это выполнит +up+ метод на всех миграциях включая 20080906120000, если перемещение вниз это выполнит +down+ метод на всех миграциях вниз, но не включая 20080906120000.

h4. Откат изменений

Общая задача - откат последней миграции, например если Вы сделали ошибку в миграции и хотите исправить ее. Вместо того, чтобы искать номер версии связанной с предыдущей миграцией, которую Вы можете выполнить

<shell>
rake db:rollback
</shell>

Это выполнит +down+ метод от последней миграции. Если необходимо отменить несколько миграций, Вы можете использовать параметр +STEP+:

<shell>
rake db:rollback STEP=3
</shell>

выполнит +down+ метод от последних 3 миграций.

+db:migrate:redo+ задача является ярлыком для того, чтобы сделать откат и затем выполнить миграцию. Как с +db:rollback+ задачей Вы можете использовать параметр +STEP+, если Вы должны откатить больше чем на одну версию назад, например

<shell>
rake db:migrate:redo STEP=3
</shell>

Ни одна из этих задач Rake не делает ничего, что Вы не могли бы сделать с +db:migrate+, они просто более удобны, так как Вы не должны явно определять версию, чтобы переместиться к ней.

Наконец, +db:reset+ задача удалит базу данных, обновит ее и загрузит текущую схему.

NOTE: Это не то же самое, что выполнение всех миграций - см. секцию на "schema.rb": #schema-dumping-and-you.

h4. Being Specific

Если Вы должны выполнить определенную миграцию вверх или вниз +db:migrate:up+ и +db:migrate:down+, задачи сделают это. Только определите соответствующую версию, и у соответствующей миграции будет свой +up+ или +down+ метод, например

<shell>
rake db:migrate:up VERSION=20080906120000
</shell>

выполнит +up+ метод начиная с миграции 20080906120000. Эти задачи проверяют, запускалась ли уже миграция, так что например +db:migrate:up VERSION=20080906120000+ ничего не сделает, если Active Record полагает, что миграция 20080906120000 была уже выполнена.

h4. Being Talkative

By default migrations tell you exactly what they're doing and how long it took. A migration creating a table and adding an index might produce output like this

<shell>
20080906170109 CreateProducts: migrating
-- create_table(:products)
   -> 0.0021s
-- add_index(:products, :name)
   -> 0.0026s
20080906170109 CreateProducts: migrated (0.0059s)
</shell>

Several methods are provided that allow you to control all this:

* +suppress_messages+ suppresses any output generated by its block
* +say+ outputs text (the second argument controls whether it is indented or not)
* +say_with_time+ outputs text along with how long it took to run its block. If the block returns an integer it assumes it is the number of rows affected.

For example, this migration

<ruby>
class CreateProducts < ActiveRecord::Migration
  def self.up
    suppress_messages do
      create_table :products do |t|
        t.string :name
        t.text :description
        t.timestamps
      end
    end
    say "Created a table"
    suppress_messages {add_index :products, :name}
    say "and an index!", true
    say_with_time 'Waiting for a while' do
      sleep 10
      250
    end
  end

  def self.down
    drop_table :products
  end
end
</ruby>

generates the following output

<shell>
20080906170109 CreateProducts: migrating
  Created a table
   -> and an index!
  Waiting for a while
   -> 10.0001s
   -> 250 rows
20080906170109 CreateProducts: migrated (10.0097s)
</shell>

If you just want Active Record to shut up then running +rake db:migrate VERBOSE=false+ will suppress any output.

h3. Using Models in Your Migrations

When creating or updating data in a migration it is often tempting to use one of your models. After all they exist to provide easy access to the underlying data. This can be done but some caution should be observed.

Consider for example a migration that uses the +Product+ model to update a row in the corresponding table. Alice later updates the +Product+ model, adding a new column and a validation on it. Bob comes back from holiday, updates the source and runs outstanding migrations with +rake db:migrate+, including the one that used the +Product+ model. When the migration runs the source is up to date and so the +Product+ model has the validation added by Alice. The database however is still old and so does not have that column and an error ensues because that validation is on a column that does not yet exist.

Frequently I just want to update rows in the database without writing out the SQL by hand: I'm not using anything specific to the model. One pattern for this is to define a copy of the model inside the migration itself, for example:

<ruby>
class AddPartNumberToProducts < ActiveRecord::Migration
  class Product < ActiveRecord::Base
  end

  def self.up
    ...
  end

  def self.down
    ...
  end
end
</ruby>
The migration has its own minimal copy of the +Product+ model and no longer cares about the +Product+ model defined in the application.

h4. Dealing with Changing Models

For performance reasons information about the columns a model has is cached. For example if you add a column to a table and then try and use the corresponding model to insert a new row it may try to use the old column information. You can force Active Record to re-read the column information with the +reset_column_information+ method, for example

<ruby>
class AddPartNumberToProducts < ActiveRecord::Migration
  class Product < ActiveRecord::Base
  end

  def self.up
    add_column :product, :part_number, :string
    Product.reset_column_information
    ...
  end

  def self.down
    ...
  end
end
</ruby>


h3. Schema Dumping and You

h4. What are Schema Files for?

Migrations, mighty as they may be, are not the authoritative source for your database schema. That role falls to either +db/schema.rb+ or an SQL file which Active Record generates by examining the database. They are not designed to be edited, they just represent the current state of the database.

There is no need (and it is error prone) to deploy a new instance of an app by replaying the entire migration history. It is much simpler and faster to just load into the database a description of the current schema.

For example, this is how the test database is created: the current development database is dumped (either to +db/schema.rb+ or +db/development.sql+) and then loaded into the test database.

Schema files are also useful if you want a quick look at what attributes an Active Record object has. This information is not in the model's code and is frequently spread across several migrations but is all summed up in the schema file. The "annotate_models":http://agilewebdevelopment.com/plugins/annotate_models plugin, which automatically adds (and updates) comments at the top of each model summarizing the schema, may also be of interest.

h4. Types of Schema Dumps

There are two ways to dump the schema. This is set in +config/environment.rb+ by the +config.active_record.schema_format+ setting, which may be either +:sql+ or +:ruby+.

If +:ruby+ is selected then the schema is stored in +db/schema.rb+. If you look at this file you'll find that it looks an awful lot like one very big migration:

<ruby>
ActiveRecord::Schema.define(:version => 20080906171750) do
  create_table "authors", :force => true do |t|
    t.string   "name"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

  create_table "products", :force => true do |t|
    t.string   "name"
    t.text     "description"
    t.datetime "created_at"
    t.datetime "updated_at"
    t.string   "part_number"
  end
end
</ruby>

In many ways this is exactly what it is. This file is created by inspecting the database and expressing its structure using +create_table+, +add_index+, and so on. Because this is database independent it could be loaded into any database that Active Record supports. This could be very useful if you were to distribute an application that is able to run against multiple databases.

There is however a trade-off: +db/schema.rb+ cannot express database specific items such as foreign key constraints, triggers or stored procedures. While in a migration you can execute custom SQL statements, the schema dumper cannot reconstitute those statements from the database. If you are using features like this then you should set the schema format to +:sql+.

Instead of using Active Record's schema dumper the database's structure will be dumped using a tool specific to that database (via the +db:structure:dump+ Rake task) into +db/#{RAILS_ENV}_structure.sql+. For example for PostgreSQL the +pg_dump+ utility is used and for MySQL this file will contain the output of +SHOW CREATE TABLE+ for the various tables. Loading this schema is simply a question of executing the SQL statements contained inside.

By definition this will be a perfect copy of the database's structure but this will usually prevent loading the schema into a database other than the one used to create it.

h4. Schema Dumps and Source Control

Because schema dumps are the authoritative source for your database schema, it is strongly recommended that you check them into source control.

h3. Active Record and Referential Integrity

The Active Record way claims that intelligence belongs in your models, not in the database. As such, features such as triggers or foreign key constraints, which push some of that intelligence back into the database, are not heavily used.

Validations such as +validates_uniqueness_of+ are one way in which models can enforce data integrity. The +:dependent+ option on associations allows models to automatically destroy child objects when the parent is destroyed. Like anything which operates at the application level these cannot guarantee referential integrity and so some people augment them with foreign key constraints.

Although Active Record does not provide any tools for working directly with such features, the +execute+ method can be used to execute arbitrary SQL. There are also a number of plugins such as "redhillonrails":http://agilewebdevelopment.com/plugins/search?search=redhillonrails which add foreign key support to Active Record (including support for dumping foreign keys in +db/schema.rb+).

h3. Changelog

"Lighthouse ticket":http://rails.lighthouseapp.com/projects/16213-rails-guides/tickets/6

* September 14, 2008: initial version by "Frederick Cheung":credits.html#fcheung
